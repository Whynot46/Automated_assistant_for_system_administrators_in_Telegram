import telebot
from telebot import types
from telebot.types import ReplyKeyboardRemove
from openpyxl import load_workbook
from datetime import datetime
import os
from markups import *
from IDs import *
from sys import platform


#–æ—á–∏—Å—Ç–∫–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
try:
    if platform == "linux" or platform == "linux2":
        os.system('clear')
    elif platform == "win32":
        os.system('cls')
except: pass


#–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–∞–º
try:
    wb_orders = load_workbook('./db/orders.xlsx')
    orders_sheet = wb_orders['orders']
    wb_users = load_workbook('./db/users.xlsx')
    users_sheet = wb_users['users']
    wb_reviews = load_workbook('./db/reviews.xlsx')
    reviews_sheet = wb_reviews['reviews']
    print('Loading tables: ok')
except:
    print('Loading tables: ERROR')


#–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ @P@Nachalovo_support_bot
try:
    global bot
    bot = telebot.TeleBot(API_KEY)
    bot_name = '@Nachalovo_support_bot'
    print(f'Launching the bot {bot_name} : ok')
except:
    print(f'Launching the bot {bot_name} : ERROR')


#–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@bot.message_handler(commands=['start'])
def start_message(message):
    global users_current_line
    bot.send_message(message.chat.id,
                     '–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å–≤—É–µ—Ç –±–æ—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ü—Ä–∏–≤–æ–ª–∂—Å–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞üëæ\n\n'
                     '–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–π –∏ –±—ã—Å—Ç—Ä–æ–π –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ –≤–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏üè¢\n'
                     '–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–º–æ–Ω—Ç, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∏–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –ª—é–±–æ–º—É –≤–æ–ø—Ä–æ—Å—É, —Å–≤—è–∑–∞–Ω–Ω–æ–º—É —Å —Ä–∞–±–æ—Ç–æ–π –≤–∞—à–µ–π —Ç–µ—Ö–Ω–∏–∫–∏üíª\n',
                     reply_markup=main_markup)
    user_registration(message)


#–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def user_registration(message):
    global users_current_line, users_sheet

    users_current_line = int(users_sheet[f'H1'].value)+2

    for line in range(1, users_current_line):
        if str(message.chat.id)==str(users_sheet[f'A{line}'].value):
            users_current_line = line
        else: 
            users_sheet['H1'] = int(users_sheet[f'H1'].value)+1

    bot.send_message(message.chat.id, '‚ùó –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚ùó')
    user_id = message.chat.id
    users_sheet[f'A{users_current_line}'] = user_id
    wb_users.save('./db/users.xlsx')
    input_organization(message)


def input_organization(message):
    
    bot.send_message(message.chat.id, 'üè¢ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é', reply_markup = organization_markup)
    bot.register_next_step_handler(message, check_organization)


def check_organization(message):

    if ( (message.text[0]=='/') or (message.text==None) ):
        bot.send_message(message.chat.id, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        input_organization(message)

    else: input_username(message)


def input_username(message):

    organization = message.text
    users_sheet[f'B{users_current_line}'] = organization
    wb_users.save('./db/users.xlsx')

    bot.send_message(message.chat.id, "ü™™ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –§–ò–û", reply_markup = ReplyKeyboardRemove())
    bot.register_next_step_handler(message, check_username)


def check_username(message):

    if ( (message.text[0]=='/') or (message.text==None) ):
        bot.send_message(message.chat.id, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        input_username(message)

    else: input_post(message)


def input_post(message):

    username = message.text
    users_sheet[f'C{users_current_line}'] = username
    wb_users.save('./db/users.xlsx')

    bot.send_message(message.chat.id, "üìà –£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å")
    bot.register_next_step_handler(message, check_post)


def check_post(message):

    if ( (message.text[0]=='/') or (message.text==None) ):
        bot.send_message(message.chat.id, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        input_post(message)

    else: input_phone_number(message)


def input_phone_number(message):

    post = message.text
    users_sheet[f'D{users_current_line}'] = post
    wb_users.save('./db/users.xlsx')

    bot.send_message(message.chat.id, "üìû –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω")
    bot.register_next_step_handler(message, check_phone_number)


def check_phone_number(message):

    if ( (message.text[0]=='/') or (message.text==None) ):
        bot.send_message(message.chat.id, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        input_phone_number(message)

    else:
        phone_number = message.text
        users_sheet[f'E{users_current_line}'] = phone_number
        wb_users.save('./db/users.xlsx')

        bot.send_message(message.chat.id, '‚úÖ–£—Å–ø–µ—à–Ω–æ‚úÖ\n'
            'üóÇ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å üóÇ\n'
            f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:\n{users_sheet[f'B{users_current_line}'].value}\n"
            f"ü™™ –§–ò–û: {users_sheet[f'C{users_current_line}'].value}\n"
            f"üìà –î–æ–ª–∂–Ω–æ—Å—Ç—å: {users_sheet[f'D{users_current_line}'].value}\n"
            f"üìû–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: {users_sheet[f'E{users_current_line}'].value}", reply_markup = main_markup)
        
        bot.send_message(main_chanel_id,
            'üóÇ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å üóÇ\n'
            f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:\n{users_sheet[f'B{users_current_line}'].value}\n"
            f"ü™™ –§–ò–û: {users_sheet[f'C{users_current_line}'].value}\n"
            f"üìà –î–æ–ª–∂–Ω–æ—Å—Ç—å: {users_sheet[f'D{users_current_line}'].value}\n"
            f"üìû–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: {users_sheet[f'E{users_current_line}'].value}")



#–ö–æ–º–∞–Ω–¥–∞ /help
@bot.message_handler(commands=['help'])
def commands(message):
    bot.send_message(message.chat.id, 'HELPü•∏‚ÅâÔ∏è', reply_markup=main_markup)


#–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏
@bot.message_handler(commands=['–ù–æ–≤–∞—è_–∑–∞—è–≤–∫–∞üó£'])
def new_request(message):

    users_current_line = 0

    max_line = int(reviews_sheet[f'I1'].value)+2

    for line in range (1, max_line):
        if str(users_sheet[f'A{line}'].value)==str(message.chat.id):
            users_current_line = line
            break

    bot.send_message(message.chat.id, "üóí –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É –ø–æ –Ω–∏–∂–µ—É–∫–∞–∑–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ")

    orders_current_line = int(orders_sheet['O1'].value)+2
    orders_sheet[f'A{orders_current_line}'] = int(orders_sheet['O1'].value)+1
    orders_sheet[f'K{orders_current_line}'] = users_sheet[f'A{users_current_line}'].value
    orders_sheet[f'B{orders_current_line}'] = users_sheet[f'B{users_current_line}'].value
    orders_sheet[f'C{orders_current_line}'] = users_sheet[f'C{users_current_line}'].value
    orders_sheet[f'D{orders_current_line}'] = users_sheet[f'D{users_current_line}'].value
    orders_sheet['O1'] = orders_sheet[f'A{orders_current_line}'].value
    wb_orders.save('./db/orders.xlsx')

    bot.send_message(message.chat.id, "#‚É£ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞", reply_markup = ReplyKeyboardRemove())
    bot.register_next_step_handler(message, input_user_cabinet)
    

def input_user_cabinet(message):
    cabinet = message.text
    orders_sheet[f'E{orders_current_line}'] = cabinet
    wb_orders.save('./db/orders.xlsx')

    bot.send_message(message.chat.id, "üìù –ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É")
    bot.register_next_step_handler(message, input_user_problem)

def input_user_problem(message):

    user_problem = message.text
    orders_sheet[f'F{orders_current_line}'] = user_problem
    wb_orders.save('./db/orders.xlsx')

    file_markup = types.ReplyKeyboardMarkup(resize_keyboard = True)
    btn_no_file = types.KeyboardButton(text = '‚ùå –ù–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å ‚ùå')
    file_markup.add(btn_no_file)
    bot.send_message(message.chat.id, "üåÑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ", reply_markup = file_markup)
    bot.register_next_step_handler(message, input_user_file)

def input_user_file(message):

    orders_sheet[f'L{orders_current_line}'] = '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'
    orders_sheet[f'H{orders_current_line}'] = f'{datetime.now().strftime("%d-%m-%Y %H:%M")}'
    orders_sheet[f'G{orders_current_line}'] = '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'
    wb_orders.save('./db/orders.xlsx')

    request_message = bot.send_message(main_chanel_id, f"üè¢{orders_sheet[f'B{orders_current_line}'].value}\n"
        f"ü™™{orders_sheet[f'C{orders_current_line}'].value}\n"
        f"üìà{orders_sheet[f'D{orders_current_line}'].value}\n"
        f"#‚É£–ö–∞–±–∏–Ω–µ—Ç: {orders_sheet[f'E{orders_current_line}'].value}\n"
        f"üìù–ü—Ä–æ–±–ª–µ–º–∞:\n{orders_sheet[f'F{orders_current_line}'].value}\n"
        f"üè∑Ô∏èID: {orders_sheet[f'A{orders_current_line}'].value}\n"
        f"üì®–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {orders_sheet[f'H{orders_current_line}'].value}",
        reply_markup = task_markup)

    request_hash = hash(request_message.text)
    orders_sheet[f'M{orders_current_line}'] = str(request_hash)
    wb_orders.save('./db/orders.xlsx')

    if message.text != '‚ùå –ù–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å ‚ùå':
        orders_sheet[f'G{orders_current_line}'] = '–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã'
        wb_orders.save('./db/orders.xlsx')
        bot.forward_message(main_chanel_id, message.chat.id, message.id)

    bot.send_message(message.chat.id, "‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ ‚úÖ", reply_markup = main_markup)
    print(f"New request received    | Request ID: {orders_sheet[f'A{orders_current_line}'].value} |")


#–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(commands=['–ú–æ–∏_–∑–∞—è–≤–∫–∏üîç'])
def show_user_requests(message):

    max_line = int(orders_sheet[f'O1'].value)+2
    k=0
    for line in range (2, max_line):
        if str(orders_sheet[f'K{line}'].value)==str(users_sheet[f'A{users_current_line}'].value):
            k+=1
            bot.send_message(message.chat.id,
                f"#‚É£–ö–∞–±–∏–Ω–µ—Ç: {orders_sheet[f'E{line}'].value}\n"
                f"üìù–ü—Ä–æ–±–ª–µ–º–∞:\n{orders_sheet[f'F{line}'].value}\n"
                f"üè∑Ô∏èID: {orders_sheet[f'A{line}'].value}\n"
                f"üÜò–°—Ç–∞—Ç—É—Å: {orders_sheet[f'L{line}'].value}\n"
                f"üì®–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {orders_sheet[f'H{line}'].value}\n"
                f"üëÄ–î–∞—Ç–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {orders_sheet[f'I{line}'].value}\n"
                f"ü§ù–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {orders_sheet[f'J{line}'].value}",
                reply_markup = main_markup)

    if k==0: bot.send_message(message.chat.id, '‚ö† –í—ã –µ—â—ë –Ω–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –∑–∞—è–≤–æ–∫ ‚ö†', reply_markup = main_markup)


#–ö–æ–Ω—Ç–∞–∫—Ç—ã –∞–¥–º–∏–Ω–∞
@bot.message_handler(commands=['–ö–æ–Ω—Ç–∞–∫—Ç—ãüìú'])
def show_contacts(message):
    bot.send_message(message.chat.id, 'üë®‚Äçüíª –°–∫–ª—è—Ä–µ–Ω–∫–æ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞\nüì±WhatsApp: +79171775068\n', reply_markup = main_markup)


#–û—Ç–∑—ã–≤—ã
@bot.message_handler(commands=['–û—Å—Ç–∞–≤–∏—Ç—å_–æ—Ç–∑—ã–≤üì´'])
def make_new_review(message):

    max_line = int(reviews_sheet[f'I1'].value)+2

    for line in range (1, max_line):
        if str(users_sheet[f'A{line}'].value)==str(message.chat.id):
            users_current_line = line
            break

    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤—Å—ë, —á—Ç–æ –¥—É–º–∞–µ—Ç–µ –æ –¥–∞–Ω–Ω–æ–º —Å–µ—Ä–≤–∏—Å–µüôÉ\n–í–∞—à –æ—Ç–∑—ã–≤ –±—É–¥–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö —Å–µ—Ä–≤–∏—Å–∞üëæ", reply_markup = ReplyKeyboardRemove())
    bot.register_next_step_handler(message, save_user_review)


def save_user_review(message):
    reviews_current_line = int(reviews_sheet['I1'].value)+2
    text_review = message.text
    reviews_sheet[f'A{reviews_current_line}'] = str(reviews_current_line-1)
    reviews_sheet[f'B{reviews_current_line}'] = users_sheet[f'B{users_current_line}'].value
    reviews_sheet[f'C{reviews_current_line}'] = users_sheet[f'C{users_current_line}'].value
    reviews_sheet[f'D{reviews_current_line}'] = users_sheet[f'D{users_current_line}'].value
    reviews_sheet[f'E{reviews_current_line}'] = text_review
    reviews_sheet['I1'] = reviews_sheet[f'A{reviews_current_line}'].value
    reviews_sheet[f'F{reviews_current_line}'] = f'{datetime.now().strftime("%d-%m-%Y %H:%M")}'
    wb_reviews.save('./db/reviews.xlsx')
    bot.send_message(main_chanel_id, 'üëÄ–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤üëÄ\n'
        f"üè¢{reviews_sheet[f'B{reviews_current_line}'].value}\n"
        f"ü™™{reviews_sheet[f'C{reviews_current_line}'].value}\n"
        f"üìà{reviews_sheet[f'D{reviews_current_line}'].value}\n"
        f"–û—Ç–∑—ã–≤:\n{reviews_sheet[f'E{reviews_current_line}'].value}\n"
        f"{reviews_sheet[f'F{reviews_current_line}'].value}")
    bot.send_message(message.chat.id, 'üíå –í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n–û–≥—Ä–æ–º–Ω–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—åü•∞' ,reply_markup = main_markup)
    print(f"New review received | from_user: {reviews_sheet[f'C{reviews_current_line}'].value} |")


#callback-–∏ inline –∫–Ω–æ–ø–æ–∫ –ü—Ä–∏–Ω—è—Ç–∏—è/–û—Ç–∫–∞–∑–∞
@bot.callback_query_handler(func = lambda call : True)
def answer(call):
    users_current_line = int(orders_sheet[f'O1'].value)+2
    if call.data == 'done':
        for line in range (2, users_current_line):
            if str(orders_sheet[f'M{line}'].value)== str(hash(call.message.text)):
                if str(orders_sheet[f'L{line}'].value)=='–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ':
                    bot.edit_message_text(f'{call.message.text}\nüßê–ü—Ä–∏–Ω—è—Ç–æ: {datetime.now().strftime("%d-%m-%Y %H:%M")}', reply_markup = lets_done_markup, chat_id=call.message.chat.id, message_id=call.message.message_id)
                    request_id = str(orders_sheet[f'A{line}'].value)
                    print(f'Request received   Requset ID: {request_id}')
                    orders_sheet[f'I{line}'] = str(datetime.now().strftime("%d-%m-%Y %H:%M"))
                    orders_sheet[f'L{line}'] = '–ü—Ä–∏–Ω—è—Ç–æ'
                    wb_orders.save('./db/orders.xlsx')
                    bot.send_message(int(orders_sheet[f'K{line}'].value), f'‚òëÔ∏è–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ\nüè∑Ô∏èID –∑–∞—è–≤–∫–∏: {request_id}')
                    break

    elif call.data == 'refusal':
        for line in range (2, users_current_line):
            if str(orders_sheet[f'M{line}'].value)== str(hash(call.message.text)):
                if str(orders_sheet[f'L{line}'].value)=='–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ':
                    bot.edit_message_text(f'{call.message.text}\n–û—Ç–∫–∞–∑–∞–Ω–æ: {datetime.now().strftime("%d-%m-%Y %H:%M")}', reply_markup = refusal_markup, chat_id=call.message.chat.id, message_id=call.message.message_id)
                    request_id = str(orders_sheet[f'A{line}'].value)
                    print(f'Refusal of the request  | Requset ID: {request_id} |')
                    orders_sheet[f'J{line}'] = str(datetime.now().strftime("%d-%m-%Y %H:%M"))
                    orders_sheet[f'L{line}'] = '–û—Ç–∫–∞–∑–∞–Ω–æ'
                    wb_orders.save('./db/orders.xlsx')
                    bot.send_message(int(orders_sheet[f'K{line}'].value), f'‚ùå–í–∞—à—É –∑–∞—è–≤–∫—É –æ—Ç–∫–ª–æ–Ω–∏–ª–∏\nüè∑Ô∏èID –∑–∞—è–≤–∫–∏: {request_id}')
                    break

    elif call.data == 'done_request':
        for line in range (2, users_current_line):
            if str(orders_sheet[f'M{line}'].value)== str(hash(call.message.text.partition('\nüßê–ü—Ä–∏–Ω—è—Ç–æ: ')[0])):
                if str(orders_sheet[f'L{line}'].value)=='–ü—Ä–∏–Ω—è—Ç–æ':
                    bot.edit_message_text(f'{call.message.text}\n‚úÖ–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {datetime.now().strftime("%d-%m-%Y %H:%M")}', reply_markup=done_markup, chat_id=call.message.chat.id, message_id=call.message.message_id)
                    request_id = str(orders_sheet[f'A{line}'].value)
                    print(f'Request completed   | Requset ID: {request_id} |')
                    orders_sheet[f'J{line}'] = str(datetime.now().strftime("%d-%m-%Y %H:%M"))
                    orders_sheet[f'L{line}'] = '–í—ã–ø–æ–ª–Ω–µ–Ω–æ'
                    wb_orders.save('./db/orders.xlsx')
                    bot.send_message(int(orders_sheet[f'K{line}'].value), f'‚úÖ–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\nüè∑Ô∏èID –∑–∞—è–≤–∫–∏: {request_id}')
                    break

    elif call.data == 'pass':
        pass


#–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@bot.message_handler(commands=['admin_panel'])
def open_admin_panel(message):
        if str(message.chat.id) in admin_id:
            bot.send_message(message.chat.id, '–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup = admin_markup)


#–í—ã–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
@bot.message_handler(commands=['get_users'])
def get_users_sheet(message):
    if str(message.chat.id) in admin_id:
        bot.send_document(message.chat.id, open(r'./db/users.xlsx', 'rb'))


#–í—ã–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –∑–∞—è–≤–æ–∫
@bot.message_handler(commands=['get_orders'])
def get_orders_sheet(message):
    if str(message.chat.id) in admin_id:
        bot.send_document(message.chat.id, open(r'./db/orders.xlsx', 'rb'))


#–í—ã–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç–∑—ã–≤–æ–≤
@bot.message_handler(commands=['get_reviews'])
def get_reviews_sheet(message):
    if str(message.chat.id) in admin_id:
        bot.send_document(message.chat.id, open(r'./db/reviews.xlsx', 'rb'))


#–û–±—â–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
@bot.message_handler(commands=['tell_everyone'])
def send_message_for_everyone(message):
    if str(message.chat.id) in admin_id:
        bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=cancel_markup)
        bot.register_next_step_handler(message, send_admin_message_for_everyone)


def send_admin_message_for_everyone(message):
    if str(message.text)!='–û—Ç–º–µ–Ω–∞':
        max_line = int(users_sheet[f'H1'].value)+2
        for line in range (2, max_line):
            try: 
                bot.send_message(int(users_sheet[f'A{line}'].value), message.text)
            except: 
                bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID: {str(users_sheet[f'A{line}'].value)}")
                continue
        bot.send_message(message.chat.id, '–°–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã', reply_markup = main_markup)

    else: bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup = main_markup)  


#–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(commands=['tell_to_user'])
def send_message_for_user(message):
    if str(message.chat.id) in admin_id:
        bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", reply_markup=cancel_markup)
        bot.register_next_step_handler(message, check_recipient_id)


def check_recipient_id(message):
    global recipient_id
    recipient_id = int(message.text)
    print(recipient_id)
    if str(message.text)=='–û—Ç–º–µ–Ω–∞':
        bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup = main_markup)  
    elif (str(message.text[0]) == '/') or (str(message.text[0]) == None):
        bot.send_message(message.chat.id, f'–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
        send_message_for_user(message)
    else:
        bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è", reply_markup=cancel_markup)
        bot.register_next_step_handler(message, send_admin_message_for_recipient_user)


def send_admin_message_for_recipient_user(message):
    global recipient_id
    try: 
        bot.send_message(recipient_id, message.text)
        bot.send_message(message.chat.id, '–°–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã', reply_markup = main_markup)
    except: 
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID: {str(recipient_id)}")



if __name__ == "__main__":
    #while True:
        #try:
    bot.polling(none_stop=True, interval=0, timeout=20)
        #except: pass
